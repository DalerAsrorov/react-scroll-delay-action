{"version":3,"sources":["DelayedScrollAction/utils.ts","DelayedScrollAction/index.tsx","MultipleItemsExample.tsx","SingleItem.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["getParent","parentNode","window","isScrolledIntoView","domElement","rect","getBoundingClientRect","topVal","top","bottomVal","bottom","innerHeight","DelayedScrollAction","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkIfViewIsReached","nodeRef","React","createRef","state","_this2","_this$props","id","delayTime","callOnce","onStart","onEnd","parent","setState","Error","addEventListener","delayTimeout","setTimeout","clearTimeout","undefined","_this3","children","Children","map","child","cloneElement","ref","PureComponent","boxStyle","background","width","height","margin","display","justifyContent","alignItems","fontSize","fontWeight","MultipleItemsExample","currentNodeIndex","handleDelayedAction","console","log","concat","nBoxes","items","toConsumableArray","Array","d","i","react_default","a","createElement","Fragment","item","DelayedScrollAction_DelayedScrollAction","key","style","objectSpread","isCurrentItem","SingleItem","boxText","shouldCongratulate","handleDelayedStart","_this$state","textAlign","wrapper","Menu","Link","to","App","BrowserRouter","basename","process","Route","exact","path","component","MultipleItemsExample_MultipleItemsExample","SingleItem_SingleItem","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d772b005.chunk.js","sourcesContent":["export const getParent = (parentNode: any): any | Window =>\n  parentNode ? parentNode : window;\n\nexport const isScrolledIntoView = (\n  domElement: any,\n  parentNode?: any\n): boolean => {\n  if (!domElement) {\n    return false;\n  }\n\n  const rect = domElement.getBoundingClientRect();\n  const parent = getParent(parentNode);\n  const topVal = rect.top;\n  const bottomVal = rect.bottom;\n\n  // Only completely visible elements return true:\n  const isVisible = topVal >= 0 && bottomVal <= window.innerHeight;\n\n  // Uncomment line below if decided that partially visible elements return true:\n  //isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n\n  return isVisible;\n};\n","import React, { PureComponent } from 'react';\nimport { getParent, isScrolledIntoView } from './utils';\nimport { type } from 'os';\n\nexport default class DelayedScrollAction extends PureComponent<\n  ReactDelayedScrollProps,\n  ReactDelayedScrollState\n> {\n  private nodeRef: any;\n  private delayTimeout: any;\n\n  constructor(props: ReactDelayedScrollProps) {\n    super(props);\n\n    this.nodeRef = React.createRef();\n    this.state = {\n      parentNode: props.parentNode\n    };\n  }\n\n  componentDidMount() {\n    const { id, delayTime, callOnce, parentNode, onStart, onEnd } = this.props;\n    const parent = getParent(parentNode);\n\n    // update the state with current parentNode\n    this.setState({\n      parentNode: parent\n    });\n\n    // The event listeners are attached to the parent relative\n    // to which the child component should compute the visibility\n    if (parent && typeof parent === 'object') {\n      parent.addEventListener('scroll', () => {\n        // if the callbacks should be called only once\n        // after the element is visible on scroll event,\n        // we want to make sure that the timer wasn't triggered before\n        if (this.checkIfViewIsReached() && !this.delayTimeout) {\n          if (onStart) {\n            onStart(id);\n          }\n\n          this.delayTimeout = setTimeout(() => {\n            if (onEnd && this.checkIfViewIsReached()) {\n              onEnd(id);\n            }\n\n            // cancel timeout\n            clearTimeout(this.delayTimeout);\n\n            // if callOnce is false, re-assign delayTimeout to undefined\n            // to allow the new scroll event trigger onStart and onEnd callbacks continuosly\n            if (!callOnce) {\n              this.delayTimeout = undefined;\n            }\n          }, delayTime);\n        }\n      });\n    } else {\n      throw new Error(\n        'Parent is either undefined or haveu unkown type. Please provide proper parent node.'\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.delayTimeout);\n  }\n\n  private checkIfViewIsReached = () => {\n    return isScrolledIntoView(this.nodeRef);\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return React.Children.map(\n      children,\n      (child: any) =>\n        child\n          ? React.cloneElement(child, {\n              ref: (ref: any) => (this.nodeRef = ref)\n            })\n          : null\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport DelayedScrollAction from './DelayedScrollAction';\n\nconst DEFAULT_COLOR = 'blue';\nconst ACTIVE_COLOR = 'lightblue';\n\nconst assignBackground = (isCurrentItem: boolean) => {\n  const color = isCurrentItem ? ACTIVE_COLOR : DEFAULT_COLOR;\n\n  return color;\n};\n\nconst boxStyle: React.CSSProperties = {\n  background: DEFAULT_COLOR,\n  width: '100%',\n  height: '300px',\n  margin: '20px 0px',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  fontSize: '24px',\n  fontWeight: 600\n};\n\ninterface Props {\n  nBoxes: number;\n  delayTime: number;\n}\n\ninterface State {\n  currentNodeIndex: number;\n}\n\nexport default class MultipleItemsExample extends PureComponent<Props, State> {\n  state = {\n    currentNodeIndex: 0\n  };\n\n  private handleDelayedAction = (id: number) => {\n    console.log(`onEnd called: ${id}`);\n    this.setState({\n      currentNodeIndex: id\n    });\n  };\n\n  render() {\n    const { currentNodeIndex } = this.state;\n    const { delayTime, nBoxes } = this.props;\n    const items = [...Array(nBoxes).map((d, i) => i)];\n\n    return (\n      <React.Fragment>\n        {items.map((item, i) => (\n          <DelayedScrollAction\n            key={i}\n            id={i}\n            delayTime={delayTime}\n            onEnd={this.handleDelayedAction}\n          >\n            <article\n              key={i}\n              style={{\n                ...boxStyle,\n                background: assignBackground(i === currentNodeIndex)\n              }}\n            >\n              {i + 1}\n            </article>\n          </DelayedScrollAction>\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport DelayedScrollAction from './DelayedScrollAction';\n\ninterface Props {\n  delayTime: number;\n}\n\ninterface State {\n  boxText: string;\n  shouldCongratulate: boolean;\n}\n\nconst boxStyle = {\n  height: '250px',\n  width: '50%',\n  background: 'orange',\n  margin: '2000px auto',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n};\n\nexport default class SingleItem extends React.PureComponent<Props, State> {\n  state = {\n    boxText: 'Waiting for you...',\n    shouldCongratulate: false\n  };\n\n  private handleDelayedAction = () => {\n    const { delayTime } = this.props;\n\n    this.setState({\n      shouldCongratulate: true,\n      boxText: `Tada!!! You stared at me for ${delayTime / 1000} seconds.`\n    });\n  };\n\n  private handleDelayedStart = () => {\n    this.setState({ boxText: 'You are finally here! Wait for it...' });\n  };\n\n  render() {\n    const { boxText, shouldCongratulate } = this.state;\n    const { delayTime } = this.props;\n\n    return (\n      <div style={{ height: '40000px' }}>\n        <h1 style={{ textAlign: 'center' }}>Scroll down!!!</h1>\n        <div style={boxStyle}>\n          <DelayedScrollAction\n            onStart={this.handleDelayedStart}\n            onEnd={this.handleDelayedAction}\n            delayTime={delayTime}\n            id=\"banner\"\n            callOnce={true}\n          >\n            <article id=\"banner\">{boxText}</article>\n            {shouldCongratulate && <p style={{ textAlign: 'center' }}>😉</p>}\n          </DelayedScrollAction>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport MultipleItemsExample from './MultipleItemsExample';\nimport SingleItem from './SingleItem';\n\nconst wrapper: React.CSSProperties = {\n  width: '100%',\n  height: '100%'\n};\n\nconst Menu = () => (\n  <nav>\n    <ul>\n      <li>\n        <Link to=\"/multiple-items\">\n          Multiple items - delayed actions for collection of elements.\n        </Link>\n      </li>\n      <li>\n        <Link to=\"/single-banner\">\n          Scroll event attached to a single element with delayed action.\n        </Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nclass App extends Component<{}, {}> {\n  render() {\n    return (\n      <div style={wrapper}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <React.Fragment>\n            <Route exact path=\"/\" component={Menu} />\n            <Route\n              exact\n              path=\"/multiple-items\"\n              component={() => (\n                <MultipleItemsExample nBoxes={15} delayTime={3000} />\n              )}\n            />\n            <Route\n              exact\n              path=\"/single-banner\"\n              component={() => <SingleItem delayTime={5000} />}\n            />\n          </React.Fragment>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}